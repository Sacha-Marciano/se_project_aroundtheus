!function(){"use strict";class e{constructor(e,t){this._formSelector=e.formSelector,this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._form=t,this._inputList=Array.from(this._form.querySelectorAll(this._inputSelector)),this._buttonSubmit=this._form.querySelector(this._submitButtonSelector)}_setEventsListeners(){this._form.addEventListener("submit",(e=>{e.preventDefault()})),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(this._form,e,this._inputErrorClass,this._errorClass),this._toggleButtonState(this._inputList,this._buttonSubmit,this._inactiveButtonClass)}))}))}_toggleButtonState(e,t,s){this._hasInvalidInput(e)?this.disableButton():(t.classList.remove(s),t.disabled=!1)}_hasInvalidInput(e){return e.some((e=>!e.validity.valid))}_checkInputValidity(e,t,s,n){t.validity.valid?this._hideInputError(e,t,s,n):this._showInputError(e,t,t.validationMessage,s,n)}_showInputError(e,t,s,n,i){const r=e.querySelector(`.${t.id}-error`);t.classList.add(n),r.textContent=s,r.classList.add(i)}_hideInputError(e,t,s,n){const i=e.querySelector(`.${t.id}-error`);t.classList.remove(s),i.classList.remove(n),i.textContent=""}enableValidation(){this.disableButton(),this._setEventsListeners()}disableButton(){this._buttonSubmit.classList.add(this._inactiveButtonClass),this._buttonSubmit.disabled=!0}}class t{constructor(e,t,s){this._name=e.name,this._link=e.link,this._template=t,this._handleImageClick=s,this._newCard=document.querySelector(this._template).content.querySelector(".card").cloneNode(!0)}renderCard(){return this._cardImageElement=this._newCard.querySelector(".card__image"),this._cardNameElement=this._newCard.querySelector(".card__name"),this._cardLikeElement=this._newCard.querySelector(".card__like-button"),this._cardTrashElement=this._newCard.querySelector(".card__delete-button"),this._cardImageElement.alt=this._name,this._cardImageElement.src=this._link,this._cardNameElement.textContent=this._name,this._setEventListeners(),this._newCard}_setEventListeners(){this._cardImageElement.addEventListener("click",(()=>{this._handleImageClick(this)})),this._cardLikeElement.addEventListener("click",(e=>{e.stopPropagation(),this._toggleLike()})),this._cardTrashElement.addEventListener("click",(e=>{e.stopPropagation(),this._deleteCard()}))}_toggleLike(){this._cardLikeElement.classList.toggle("card__like-button_liked")}_deleteCard(){this._newCard.remove()}}class s{constructor(e){this._popup=document.querySelector(e),this._closeButton=this._popup.querySelector(".modal__button_type_close"),this._handleEscClose=this._handleEscClose.bind(this)}open(){this._popup.classList.add("modal_opened"),document.addEventListener("keyup",this._handleEscClose)}close(){this._popup.classList.remove("modal_opened"),document.removeEventListener("keyup",this._handleEscClose)}_handleEscClose(e){"Escape"===e.key&&this.close()}setEventListeners(){this._closeButton.addEventListener("click",(()=>{this.close()})),this._popup.addEventListener("mousedown",(e=>{e.target===this._popup&&this.close()}))}}class n extends s{constructor(e,t){super(e),this.form=this._popup.querySelector(".modal__container"),this._handleFormSubmit=t,this._inputs=this.form.querySelectorAll(".modal__input")}_getInputValues(){const e={};return this._inputs.forEach((t=>{e[t.name]=t.value})),e}setEventListeners(){this.form.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues())})),super.setEventListeners()}}const i={formSelector:".modal__container",inputSelector:".modal__input",submitButtonSelector:".modal__button_type_submit",inactiveButtonClass:"modal__button_inactive",inputErrorClass:"modal__input_type_error",errorClass:"modal__input-error"},r=new class{constructor(e){let{nameSelector:t,descriptionSelector:s}=e;this._name=document.querySelector(t),this._description=document.querySelector(s)}getUserInfo(){return{name:this._name.textContent,description:this._description.textContent}}setUserInfo(e){this._name.textContent=e.name,this._description.textContent=e.description}}({nameSelector:".profile__name",descriptionSelector:".profile__description"}),o=document.querySelector(".profile__button_type_edit"),a=document.querySelector(".profile__button_type_add"),l=new class extends s{constructor(e){super(e),this._image=this._popup.querySelector(".modal__image"),this._modalTitle=this._popup.querySelector(".modal__image-title")}open(e){this._image.src=e._link,this._image.alt=e._name,this._modalTitle.textContent=e._name,super.open()}}("#image-modal-id"),c=new n("#edit-modal-id",(function(e){r.setUserInfo(e),c.close(),u.disableButton()})),d=new n("#add-modal-id",(function(e){_.addItem(h(e)),d.close(),d.form.reset(),m.disableButton()})),_=new class{constructor(e,t){let{items:s,renderer:n}=e;this._items=s,this._container=document.querySelector(t),this._renderer=n}renderItems(){this._items.forEach((e=>{const t=this._renderer(e);this.addItem(t)}))}addItem(e){this._container.prepend(e)}}({items:[{name:"Lago di Braies",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lago.jpg"},{name:"Vanoise National Park",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/vanoise.jpg"},{name:"Latemar",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/latemar.jpg"},{name:"Bald Mountains",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/bald-mountains.jpg"},{name:"Lake Louise",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lake-louise.jpg"},{name:"Yosemite Valley",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/yosemite.jpg"}],renderer:h},".cards__list"),u=new e(i,c.form),m=new e(i,d.form);function h(e){return new t(e,"#card__template",p).renderCard()}function p(e){l.open(e)}_.renderItems(),u.enableValidation(),m.enableValidation(),o.addEventListener("click",(()=>{var e;e=r.getUserInfo(),c.form.querySelector("#name-id").value=e.name,c.form.querySelector("#aboutMe-id").value=e.description,c.open()})),a.addEventListener("click",(()=>d.open())),l.setEventListeners(),c.setEventListeners(),d.setEventListeners()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,