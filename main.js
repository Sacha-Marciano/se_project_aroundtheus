!function(){"use strict";class e{constructor(e,t){this._formSelector=e.formSelector,this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._form=t,this._inputList=Array.from(this._form.querySelectorAll(this._inputSelector)),this._buttonSubmit=this._form.querySelector(this._submitButtonSelector)}_setEventsListeners(){this._form.addEventListener("submit",(e=>{e.preventDefault()})),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(this._form,e,this._inputErrorClass,this._errorClass),this._toggleButtonState(this._inputList,this._buttonSubmit,this._inactiveButtonClass)}))}))}_toggleButtonState(e,t,s){this._hasInvalidInput(e)?this.disableButton():(t.classList.remove(s),t.disabled=!1)}_hasInvalidInput(e){return e.some((e=>!e.validity.valid))}_checkInputValidity(e,t,s,i){t.validity.valid?this._hideInputError(e,t,s,i):this._showInputError(e,t,t.validationMessage,s,i)}_showInputError(e,t,s,i,r){const n=e.querySelector(`.${t.id}-error`);t.classList.add(i),n.textContent=s,n.classList.add(r)}_hideInputError(e,t,s,i){const r=e.querySelector(`.${t.id}-error`);t.classList.remove(s),r.classList.remove(i),r.textContent=""}enableValidation(){this.disableButton(),this._setEventsListeners()}disableButton(){this._buttonSubmit.classList.add(this._inactiveButtonClass),this._buttonSubmit.disabled=!0}}class t{constructor(e,t,s,i,r){this._name=e.name,this._link=e.link,this._id=e._id,this._isLiked=e.isLiked,this._template=t,this._handleImageClick=s,this._newCard=document.querySelector(this._template).content.querySelector(".card").cloneNode(!0),this._handleDeleteClick=i,this._toggleServerLike=r}renderCard(){return this._cardImageElement=this._newCard.querySelector(".card__image"),this._cardNameElement=this._newCard.querySelector(".card__name"),this._cardLikeElement=this._newCard.querySelector(".card__like-button"),this._cardTrashElement=this._newCard.querySelector(".card__delete-button"),this._cardImageElement.alt=this._name,this._cardImageElement.src=this._link,this._cardNameElement.textContent=this._name,this._setEventListeners(),this._toggleLike(),this._newCard}_setEventListeners(){this._cardImageElement.addEventListener("click",(()=>{this._handleImageClick(this)})),this._cardLikeElement.addEventListener("click",(e=>{e.stopPropagation(),this._toggleServerLike(this),this._toggleLike()})),this._cardTrashElement.addEventListener("click",(e=>{e.stopPropagation(),this._handleDeleteClick(this)}))}_toggleLike(){this._isLiked?this._cardLikeElement.classList.add("card__like-button_liked"):this._cardLikeElement.classList.remove("card__like-button_liked")}deleteCard(){this._newCard.remove()}}class s{constructor(e){this._popup=document.querySelector(e),this._closeButton=this._popup.querySelector(".modal__button_type_close"),this._handleEscClose=this._handleEscClose.bind(this)}open(){this._popup.classList.add("modal_opened"),document.addEventListener("keyup",this._handleEscClose)}close(){this._popup.classList.remove("modal_opened"),document.removeEventListener("keyup",this._handleEscClose)}_handleEscClose(e){"Escape"===e.key&&this.close()}setEventListeners(){this._closeButton.addEventListener("click",(()=>{this.close()})),this._popup.addEventListener("mousedown",(e=>{e.target===this._popup&&this.close()}))}}class i extends s{constructor(e,t){super(e),this.form=this._popup.querySelector(".modal__container"),this._handleFormSubmit=t,this._inputs=this.form.querySelectorAll(".modal__input"),this._submitButton=this.form.querySelector(".modal__button_type_submit"),this._originalText=this._submitButton.textContent}_getInputValues(){const e={};return this._inputs.forEach((t=>{e[t.name]=t.value})),e}setEventListeners(){this.form.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues(),this._submitButton)})),super.setEventListeners()}renderLoading(e){this._submitButton.textContent=e?"Saving...":this._originalText}}const r={formSelector:".modal__container",inputSelector:".modal__input",submitButtonSelector:".modal__button_type_submit",inactiveButtonClass:"modal__button_inactive",inputErrorClass:"modal__input_type_error",errorClass:"modal__input-error"},n=new class{constructor(e){let{baseURL:t,headers:s}=e;this._baseURL=t,this._headers=s}getCurrentUser(){return fetch(`${this._baseURL}/users/me`,{method:"GET",headers:this._headers}).then((e=>this._checkResponse(e))).catch((e=>{console.log(e)}))}updateCurrentUser(e){return fetch(`${this._baseURL}/users/me`,{method:"PATCH",headers:this._headers,body:e}).then((e=>this._checkResponse(e))).catch((e=>{console.log(e)}))}updateCurrentAvatar(e){return fetch(`${this._baseURL}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:e}).then((e=>this._checkResponse(e))).catch((e=>{console.log(e)}))}getAllCards(){return fetch(`${this._baseURL}/cards`,{method:"GET",headers:this._headers}).then((e=>this._checkResponse(e))).catch((e=>{console.log(e)}))}postCard(e){return fetch(`${this._baseURL}/cards`,{method:"POST",headers:this._headers,body:e}).then((e=>this._checkResponse(e))).catch((e=>{console.log(e)}))}deleteCard(e){return fetch(`${this._baseURL}/cards/${e}`,{method:"DELETE",headers:this._headers}).then((e=>this._checkResponse(e))).catch((e=>{console.log(e)}))}putLike(e){return fetch(`${this._baseURL}/cards/${e}/likes`,{method:"PUT",headers:this._headers}).then((e=>this._checkResponse(e))).catch((e=>{console.log(e)}))}deleteLike(e){return fetch(`${this._baseURL}/cards/${e}/likes`,{method:"DELETE",headers:this._headers}).then((e=>this._checkResponse(e))).catch((e=>{console.log(e)}))}_checkResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}checkPromises(){return Promise.all([this.getCurrentUser(),this.getAllCards()])}}({baseURL:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"a50cd7e6-b371-411e-bfcd-861efcd7c545","Content-Type":"application/json"}}),o=document.querySelector(".profile__button_type_edit"),a=document.querySelector(".profile__button_type_add"),d=document.querySelector(".profile__image"),l=document.querySelector(".image__container"),c=new class{constructor(e,t){let{renderer:s}=e;this._container=document.querySelector(t),this._renderer=s}addItem(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"append";this._container[t](this._renderer(e))}}({renderer:function(e){return new t(e,"#card__template",g,f,k).renderCard()}},".cards__list"),h=new class{constructor(e){let{nameSelector:t,descriptionSelector:s}=e;this._name=document.querySelector(t),this._description=document.querySelector(s)}getUserInfo(){return{name:this._name.textContent,about:this._description.textContent}}setUserInfo(e){this._name.textContent=e.name,this._description.textContent=e.about}}({nameSelector:".profile__name",descriptionSelector:".profile__description",avatarSelector:"."}),_=new class extends s{constructor(e){super(e),this._image=this._popup.querySelector(".modal__image"),this._modalTitle=this._popup.querySelector(".modal__image-title")}open(e){this._image.src=e._link,this._image.alt=e._name,this._modalTitle.textContent=e._name,super.open()}}("#image-modal-id"),u=new i("#edit-modal-id",(function(e){u.renderLoading(!0),h.setUserInfo(e),n.updateCurrentUser(JSON.stringify({name:e.name,about:e.about})).then((()=>{u.close(),u.renderLoading(!1),b.disableButton()}))})),m=new i("#add-modal-id",(function(e){m.renderLoading(!0),n.postCard(JSON.stringify({name:e.name,link:e.link})).then((e=>{c.addItem(e,"prepend")})).then((()=>{setTimeout(1e4),m.close(),m.renderLoading(!1),m.form.reset(),v.disableButton()}))})),p=new i("#avatar-modal-id",(function(e){p.renderLoading(!0),d.src=e.link,n.updateCurrentAvatar(JSON.stringify({avatar:e.link})).then((()=>{p.close(),p.renderLoading(!1),p.form.reset()}))})),L=new class extends s{constructor(e,t){super(e),this.form=this._popup.querySelector(".modal__container"),this._handleFormSubmit=t}getCardInfo(e){this._card=e}setEventListeners(){this.form.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._card)})),super.setEventListeners()}}("#delete-modal-id",(function(e){n.deleteCard(e._id),e.deleteCard(),L.close()})),b=new e(r,u.form),v=new e(r,m.form),E=new e(r,p.form);function g(e){_.open(e)}function f(e){L.getCardInfo(e),L.open()}function k(e){e._isLiked?n.deleteLike(e._id):n.putLike(e._id),e._isLiked=!e._isLiked}n.checkPromises().then((e=>{let[t,s]=e;h.setUserInfo(t),d.src=t.avatar,s.forEach((e=>{c.addItem(e)}))})),b.enableValidation(),v.enableValidation(),E.enableValidation(),o.addEventListener("click",(()=>{var e;e=h.getUserInfo(),u.form.querySelector("#name-id").value=e.name,u.form.querySelector("#aboutMe-id").value=e.about,u.open()})),l.addEventListener("click",(()=>{p.open()})),a.addEventListener("click",(()=>m.open())),_.setEventListeners(),u.setEventListeners(),m.setEventListeners(),L.setEventListeners(),p.setEventListeners()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,