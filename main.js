!function(){"use strict";class e{constructor(e,t){this._formSelector=e.formSelector,this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._form=t,this._inputList=Array.from(this._form.querySelectorAll(this._inputSelector)),this._buttonSubmit=this._form.querySelector(this._submitButtonSelector)}_setEventsListeners(){this._form.addEventListener("submit",(e=>{e.preventDefault()})),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(this._form,e,this._inputErrorClass,this._errorClass),this._toggleButtonState(this._inputList,this._buttonSubmit,this._inactiveButtonClass)}))}))}_toggleButtonState(e,t,s){this._hasInvalidInput(e)?this.disableButton():(t.classList.remove(s),t.disabled=!1)}_hasInvalidInput(e){return e.some((e=>!e.validity.valid))}_checkInputValidity(e,t,s,r){t.validity.valid?this._hideInputError(e,t,s,r):this._showInputError(e,t,t.validationMessage,s,r)}_showInputError(e,t,s,r,i){const n=e.querySelector(`.${t.id}-error`);t.classList.add(r),n.textContent=s,n.classList.add(i)}_hideInputError(e,t,s,r){const i=e.querySelector(`.${t.id}-error`);t.classList.remove(s),i.classList.remove(r),i.textContent=""}enableValidation(){this.disableButton(),this._setEventsListeners()}disableButton(){this._buttonSubmit.classList.add(this._inactiveButtonClass),this._buttonSubmit.disabled=!0}}class t{constructor(e,t,s,r,i){this._name=e.name,this._link=e.link,this.id=e._id,this.isLiked=e.isLiked,this._template=t,this._handleImageClick=s,this._newCard=document.querySelector(this._template).content.querySelector(".card").cloneNode(!0),this._handleDeleteClick=r,this._toggleServerLike=i}renderCard(){return this._cardImageElement=this._newCard.querySelector(".card__image"),this._cardNameElement=this._newCard.querySelector(".card__name"),this._cardLikeElement=this._newCard.querySelector(".card__like-button"),this._cardTrashElement=this._newCard.querySelector(".card__delete-button"),this._cardImageElement.alt=this._name,this._cardImageElement.src=this._link,this._cardNameElement.textContent=this._name,this._setEventListeners(),this.toggleLike(),this._newCard}_setEventListeners(){this._cardImageElement.addEventListener("click",(()=>{this._handleImageClick(this)})),this._cardLikeElement.addEventListener("click",(e=>{e.stopPropagation(),this._toggleServerLike(this)})),this._cardTrashElement.addEventListener("click",(e=>{e.stopPropagation(),this._handleDeleteClick(this)}))}toggleLike(){this.isLiked?this._cardLikeElement.classList.add("card__like-button_liked"):this._cardLikeElement.classList.remove("card__like-button_liked")}deleteCard(){this._newCard.remove()}}class s{constructor(e){this._popup=document.querySelector(e),this._closeButton=this._popup.querySelector(".modal__button_type_close"),this._handleEscClose=this._handleEscClose.bind(this)}open(){this._popup.classList.add("modal_opened"),document.addEventListener("keyup",this._handleEscClose)}close(){this._popup.classList.remove("modal_opened"),document.removeEventListener("keyup",this._handleEscClose)}_handleEscClose(e){"Escape"===e.key&&this.close()}setEventListeners(){this._closeButton.addEventListener("click",(()=>{this.close()})),this._popup.addEventListener("mousedown",(e=>{e.target===this._popup&&this.close()}))}}class r extends s{constructor(e,t){super(e),this.form=this._popup.querySelector(".modal__container"),this._handleFormSubmit=t,this._inputs=this.form.querySelectorAll(".modal__input"),this._submitButton=this.form.querySelector(".modal__button_type_submit"),this._originalText=this._submitButton.textContent}_getInputValues(){const e={};return this._inputs.forEach((t=>{e[t.name]=t.value})),e}setEventListeners(){this.form.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues(),this._submitButton)})),super.setEventListeners()}renderLoading(e){this._submitButton.textContent=e?"Saving...":this._originalText}}const i={formSelector:".modal__container",inputSelector:".modal__input",submitButtonSelector:".modal__button_type_submit",inactiveButtonClass:"modal__button_inactive",inputErrorClass:"modal__input_type_error",errorClass:"modal__input-error"},n=new class{constructor(e){let{baseURL:t,headers:s}=e;this._baseURL=t,this._headers=s}getCurrentUser(){return this._request(`${this._baseURL}/users/me`,{method:"GET",headers:this._headers})}updateCurrentUser(e){return this._request(`${this._baseURL}/users/me`,{method:"PATCH",headers:this._headers,body:e})}updateCurrentAvatar(e){return this._request(`${this._baseURL}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:e})}getAllCards(){return this._request(`${this._baseURL}/cards`,{method:"GET",headers:this._headers})}postCard(e){return this._request(`${this._baseURL}/cards`,{method:"POST",headers:this._headers,body:e})}deleteCard(e){return this._request(`${this._baseURL}/cards/${e}`,{method:"DELETE",headers:this._headers})}putLike(e){return this._request(`${this._baseURL}/cards/${e}/likes`,{method:"PUT",headers:this._headers})}deleteLike(e){return this._request(`${this._baseURL}/cards/${e}/likes`,{method:"DELETE",headers:this._headers})}_request(e,t){return fetch(e,t).then(this._checkResponse)}_checkResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}getInitialData(){return Promise.all([this.getCurrentUser(),this.getAllCards()])}}({baseURL:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"a50cd7e6-b371-411e-bfcd-861efcd7c545","Content-Type":"application/json"}}),a=document.querySelector(".profile__button_type_edit"),o=document.querySelector(".profile__button_type_add"),d=document.querySelector(".image__container"),l=new class{constructor(e,t){let{renderer:s}=e;this._container=document.querySelector(t),this._renderer=s}renderItems(e){return this._renderer(e)}addItem(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"append";this._container[t](e)}}({renderer:function(e){return new t(e,"#card__template",g,E,S).renderCard()}},".cards__list"),h=new class{constructor(e){let{nameSelector:t,descriptionSelector:s,avatarSelector:r}=e;this._name=document.querySelector(t),this._description=document.querySelector(s),this._avatar=document.querySelector(r)}getUserInfo(){return{name:this._name.textContent,about:this._description.textContent,avatar:this._avatar}}setUserInfo(e){this._name.textContent=e.name,this._description.textContent=e.about,this._avatar.src=e.avatar}}({nameSelector:".profile__name",descriptionSelector:".profile__description",avatarSelector:".profile__image"}),c=new class extends s{constructor(e){super(e),this._image=this._popup.querySelector(".modal__image"),this._modalTitle=this._popup.querySelector(".modal__image-title")}open(e){this._image.src=e._link,this._image.alt=e._name,this._modalTitle.textContent=e._name,super.open()}}("#image-modal-id"),_=new r("#edit-modal-id",(function(e){_.renderLoading(!0),n.updateCurrentUser(JSON.stringify({name:e.name,about:e.about})).then((e=>{h.setUserInfo(e),_.close(),L.disableButton()})).catch((e=>{console.log(e)})).finally((()=>{_.renderLoading(!1)}))})),u=new r("#add-modal-id",(function(e){u.renderLoading(!0),n.postCard(JSON.stringify({name:e.name,link:e.link})).then((e=>{l.addItem(l.renderItems(e),"prepend"),u.close(),u.form.reset(),v.disableButton()})).catch((e=>{console.log(e)})).finally((()=>{_.renderLoading(!1)}))})),m=new r("#avatar-modal-id",(function(e){m.renderLoading(!0),n.updateCurrentAvatar(JSON.stringify({avatar:e.link})).then((e=>{h.setUserInfo(e),m.close(),m.form.reset()})).catch((e=>{console.log(e)})).finally((()=>{m.renderLoading(!1)}))})),p=new class extends s{constructor(e,t){super(e),this.form=this._popup.querySelector(".modal__container"),this._handleFormSubmit=t}getCardInfo(e){this._card=e}setEventListeners(){this.form.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._card)})),super.setEventListeners()}}("#delete-modal-id",(function(e){n.deleteCard(e.id).then((()=>{e.deleteCard(),p.close()})).catch((e=>{console.log(e)}))})),L=new e(i,_.form),v=new e(i,u.form),b=new e(i,m.form);function g(e){c.open(e)}function E(e){p.getCardInfo(e),p.open()}function S(e){e.isLiked?n.deleteLike(e.id).then((()=>{e.isLiked=!e.isLiked,e.toggleLike()})).catch((e=>{console.log(e)})):n.putLike(e.id).then((()=>{e.isLiked=!e.isLiked,e.toggleLike()})).catch((e=>{console.log(e)}))}n.getInitialData().then((e=>{let[t,s]=e;h.setUserInfo(t),s.forEach((e=>{l.addItem(l.renderItems(e))}))})).catch((e=>{console.log(e)})),L.enableValidation(),v.enableValidation(),b.enableValidation(),a.addEventListener("click",(()=>{var e;e=h.getUserInfo(),_.form.querySelector("#name-id").value=e.name,_.form.querySelector("#aboutMe-id").value=e.about,_.open()})),d.addEventListener("click",(()=>{m.open()})),o.addEventListener("click",(()=>u.open())),c.setEventListeners(),_.setEventListeners(),u.setEventListeners(),p.setEventListeners(),m.setEventListeners()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,